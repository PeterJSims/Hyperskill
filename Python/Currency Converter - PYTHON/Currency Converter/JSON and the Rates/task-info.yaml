type: edu
files:
- name: cconverter/cconverter.py
  visible: true
  text: |
    class CoinBank:
        def __init__(self, count: float):
            self.count = count


    class Converter:
        RATES = {'RUB': 2.98, 'ARS': 0.82, 'HNL': 0.17, 'AUD': 1.9622, 'MAD': 0.208}

        def __init__(self):
            self.rate = None
            self.type = 'dollars'

        def set_rate(self, rate: float):
            self.rate = rate

        def convert(self, coin: CoinBank) -> dict:
            return {k: round(v * coin.count, 2) for k, v in self.RATES.items()}


    class Interface:
        def __init__(self):
            self.converter = Converter()

        def main(self):
            # count = int(input("Please, enter the number of conicoins you have: "))
            # coin = CoinBank(count)
            # rate = float(input("Please, enter the exchange rate: "))
            # self.converter.set_rate(rate)
            # self.print_coin_info(coin)
            count = float(input())
            coin = CoinBank(count)
            self.print_coin_info(coin)

        def print_coin_info(self, coin: CoinBank):
            conversion_dict = self.converter.convert(coin)
            for k, v in conversion_dict.items():
                print(f"I will get {v} {k} from the sale of {coin.count} conicoins.")


    if __name__ == '__main__':
        coin_interface = Interface()
        coin_interface.main()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from typing import List

    import ast
    import json
    import requests
    from hstest.check_result import CheckResult
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest import WrongAnswer


    class TestStage5(StageTest):

        def generate(self) -> List[TestCase]:
            list_tests = [
                TestCase(stdin='HNL', attach='HNL'),
                TestCase(stdin='ILS', attach='ILS')

            ]

            try:
                check_con = requests.get(f"https://www.floatrates.com/currency/eur/")
            except requests.exceptions.ConnectionError:
                raise WrongAnswer("Make sure that your Internet connection is fine, the URL "
                                  "is correct and floatrates.com is not down")

            return list_tests

        def check(self, reply: str, attach) -> CheckResult:
            json_to_be = requests.get(f"http://www.floatrates.com/daily/{attach}.json").text
            reply_parsed = [i for i in reply.split('\n') if i]
            usd_json = json.loads(json_to_be)['usd']
            eur_json = json.loads(json_to_be)['eur']
            he = {}
            jsons = [usd_json, eur_json]
            if len(reply_parsed) != 2:
                return CheckResult.wrong("Your output is incorrect")
            for i, repl in enumerate(reply_parsed):
                try:
                    repl = ast.literal_eval(repl)
                except SyntaxError:
                    return CheckResult.wrong("The format of the data is incorrect")
                except ValueError:
                    return CheckResult.wrong("The format of the data is incorrect")
                if type(repl) != dict:
                    return CheckResult.wrong("Your output should contain a dictionary.\n"
                                             "Make sure the format of your output is correct.")
                for key in repl.keys():
                    try:
                        if repl[key] != jsons[i][key]:
                            return CheckResult.wrong("Make sure your output is right")
                    except KeyError:
                        return CheckResult.wrong("The key needed is absent in your data")

            return CheckResult.correct()


    if __name__ == '__main__':
        TestStage5("cconverter.cconverter").run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/157/stages/821/implement#comment
status: Solved
record: 4
